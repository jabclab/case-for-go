Collect Â£200
A case for Go
17 Aug 2016

Jake Clarkson
CTO, Digital Animal
jake@digitalanimal.com
@jabclab

# https://talks.golang.org/2016/applicative.slide#19

* Which language to choose?

.image redmonk_q316_rankings.png
.caption [[http://redmonk.com/sogrady/2016/07/20/language-rankings-6-16/][Redmonk Language Rankings June 2016]]

* Overview

1. What is Go(lang)?
2. Why use Go?
3. Next steps if you want to learn more

* What is Go?

- "Go is an open source programming language that makes it easy to build simple, reliable, and efficient software."
: Robert Griesemer, Rob Pike and Ken Thompson started sketching the goals for a new language on the white board on September 21, 2007
: Go became a public open source project on November 10, 2009
- "Go is an attempt to combine the ease of programming of an interpreted, dynamically typed language with the efficiency and safety of a statically typed, compiled language" -  https://golang.org/doc/faq#creating_a_new_language
- Now on version 1.7 (as of this Tuesday)
: Yearly (Feb 1 - Aug 1) release cycle https://github.com/golang/go/wiki/Go-Release-Cycle
- 19,270 stars / 2,484 forks on GitHub (github.com/golang/go)

: Responding to No major systems language has emerged in over a decade, but over that time the computing landscape has changed tremendously
: 1. Computers are enormously quicker but software development is not faster
: 2. There is a growing rebellion against cumbersome type systems like those of Java and C++, pushing people towards dynamically typed languages such as Python and JavaScript
: 3. The emergence of multicore computers has generated worry and confusion
: Simplicity should include...
: http://redmonk.com/sogrady/2016/07/20/language-rankings-6-16/

* via https://talks.golang.org/2016/applicative.slide#13

: Sameer Ajmani, Manager Go team @ Google - 2016

.image go_positioning.svg

* Why did I get into it?

- Must things be so complex? pass the salt

- Java -> JavaScript -> Node.js -> Go

- Influential members of the Node.js community were transitioning to Go

* Who uses it?

- Google
- Uber
- BBC
- Digital Animal ;-)
- Docker
- Kubernetes
- etcd

More here https://github.com/golang/go/wiki/GoUsers

- Good support on PaaS/Continous Integration providers

: Heroku, Google App Engine, CircleCI, Travis

* Components of a (simplified!) typical development workflow

1. Develop
2. Test
3. Deploy

: Mention TDD
: Sub-sections within each of these
: 2. Develop: problem solving, refinement
: 3. Test: unit, integration, acceptance, benchmark

* Development

* Steps

1. Write code (conventions, style, linting)
2. Write tests (TDD, BDD, benchmarking)
3. Compile

* Conventions

- Go provides only one choice for each operational task
- By having mutiple ways to do things the programmer has to attempt to tread the same decision tree every time they face the task
- Consider simple array iteration:

.play iteration.go

: Rob Pike observed in 2010 that many languages were converging, they were all
: adding features and becoming indistinguishable from each other. Consider
: ES6 / ES2015 in JavaScript.

* JavaScript

.code examples/javascript/iteration.js

* Java

.code examples/java/Iteration.java

* Style

- go fmt

: Compare `go fmt` to JS, especially OSS contributions
: `go fmt` not everyone agrees but having a convention means consistency, which
: is what is prized over everything else
: Run `go lint` example in Vim

* Linting

- go lint
- go vet
- errcheck

: go lint = Golint differs from govet. Govet is concerned with correctness, whereas golint is concerned with coding style
: go vet = Vet uses heuristics that do not guarantee all reports are genuine problems, but it can find errors not caught by the compilers. e.g. Printf calls whose arguments do not align with the format string

* Testing
* Overview

- Tests live in files with a `_test.go` suffix.
- Benchmarking supported
- Coverage supported
- net/httptest very useful for testing web services

: TODO: a modern old language, if C had been written today

* Example test

.code example_unit_test.go

: regex also supported for these (e.g. to run a single test even quicker)

* Running tests

- go test
- go test -race
- go test -coverprofile=coverage.out && go tool cover -html=coverage.out

* Deployment

- go build = a statically linked binary
- Docker a good solution for compiling for multiple architectures
- https://hub.docker.com/_/golang/

: compilation takes ~1.52
: build takes ~3.5s

.code examples/cross_compile.sh

: Binaries are relatively large, include the Go runtime along with the run-time type information necessary to support dynamic type checks, reflection, and even panic-time stack traces

* How can you get into it?

- Go weekly newsletter http://golangweekly.com/
- Golang UK - tomorrow!
- Twitter - @golang, @enneff, @bradfitz
- #go-nuts on IRC
- https://tour.golang.org/welcome/1
- https://play.golang.org/
- We're on Broad St. - I'm happy to meet for coffee

More https://golang.org/help/

* Resources

- "An introduction to programming in Go" - Caleb Doxey https://www.golang-book.com/books/intro
- "Public Static Void" - Rob Pike https://www.youtube.com/watch?v=5kj5ApnhPAE
- "Simplicity is Complicated" - Rob Pike https://www.youtube.com/watch?v=rFejpH_tAHM
- "Concurrency is not Parallelism" - Rob Pike https://www.youtube.com/watch?v=cN_DpYBzKso
- "The Evolution of Go" - Robert Griesemer https://www.youtube.com/watch?v=0ReKdcpNyQg
- https://golang.org/doc/faq
- https://golang.org/doc/effective_go.html
